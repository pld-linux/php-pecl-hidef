--- hidef-0.1.1.orig/frozenarray.c	2008-10-11 11:45:42.042389665 +0200
+++ hidef-0.1.1/frozenarray.c	2008-10-11 11:46:44.748217163 +0200
@@ -97,7 +97,7 @@
 	frozen_array_object *intern = (frozen_array_object*) object;
 	frozen_array_object *clone = NULL;
 
-	clone = frozen_array_object_new(intern->zo.ce);
+	clone = frozen_array_object_new(intern->zo.ce TSRMLS_CC);
 
 	/* move data across */
 
@@ -236,7 +236,7 @@
 		{
 			if(zend_hash_find(Z_ARRVAL_P(intern->data), Z_STRVAL_P(zindex), Z_STRLEN_P(zindex)+1, (void**)(&hentry)) != FAILURE)
 			{
-				retval = frozen_array_wrap_zval(hentry[0]);
+				retval = frozen_array_wrap_zval(hentry[0] TSRMLS_CC);
 				RETURN_ZVAL(retval, 0, 1);
 			}
 		}
@@ -244,7 +244,7 @@
 		{
 			if(zend_hash_index_find(Z_ARRVAL_P(intern->data), Z_LVAL_P(zindex), (void**)(&hentry)) != FAILURE)
 			{
-				retval = frozen_array_wrap_zval(hentry[0]);
+				retval = frozen_array_wrap_zval(hentry[0] TSRMLS_CC);
 				RETURN_ZVAL(retval, 0, 1);
 			}
 		}
@@ -337,7 +337,7 @@
 	if(zend_hash_get_current_data_ex(Z_ARRVAL_P(obj->data), (void**)(&hentry), &(iterator->pos)) != FAILURE)
 	{
 		if(iterator->current) zval_ptr_dtor(&iterator->current);
-		iterator->current = frozen_array_wrap_zval(hentry[0]);
+		iterator->current = frozen_array_wrap_zval(hentry[0] TSRMLS_CC);
 		*data = &(iterator->current);
 	}
 }
--- hidef-0.1.1.orig/hidef.c	2008-10-11 11:45:42.042389665 +0200
+++ hidef-0.1.1/hidef.c	2008-10-11 11:50:29.457777886 +0200
@@ -335,7 +335,7 @@
 				return;	
 			}
 
-			hidef_define_constant(p+1, arg2, ctxt);
+			hidef_define_constant(p+1, arg2, ctxt TSRMLS_CC);
 
 		}
 		break;
@@ -406,7 +406,7 @@
 /* }}} */
 
 /* {{{ hidef_parse_ini */
-static int hidef_parse_ini(const char *ini_file, void* pctxt)
+static int hidef_parse_ini(const char *ini_file, void* pctxt TSRMLS_DC)
 {
 	struct stat sb;
 	zend_file_handle fh = {0,};
@@ -450,14 +450,14 @@
 		return 0;
 	}
 
-	return hidef_walk_dir(ini_path, ".ini", hidef_parse_ini, ctxt);
+	return hidef_walk_dir(ini_path, ".ini", hidef_parse_ini, ctxt TSRMLS_CC);
 }
 /* }}} */
 
 static int foo = 1;
 
 /* {{{ hidef_load_data */
-static int hidef_load_data(const char *data_file, void* pctxt)
+static int hidef_load_data(const char *data_file, void* pctxt TSRMLS_DC)
 {
 	struct stat sb;
 	hidef_parser_ctxt *ctxt = (hidef_parser_ctxt*)pctxt;
@@ -478,7 +478,7 @@
 			p[0] = '\0';
 			key_len = strlen(key);
 
-			data = frozen_array_unserialize(data_file);
+			data = frozen_array_unserialize(data_file TSRMLS_CC);
 
 			if(zend_hash_add(hidef_data_hash, key, key_len+1, &data, sizeof(void*), NULL) == FAILURE)
 			{
@@ -506,7 +506,7 @@
 		return 0;
 	}
 
-	return hidef_walk_dir(data_path, ".data", hidef_load_data, ctxt);
+	return hidef_walk_dir(data_path, ".data", hidef_load_data, ctxt TSRMLS_CC);
 }
 /* }}} */
 
@@ -639,7 +639,7 @@
 		return;
 	}
 
-	wrapped = frozen_array_wrap_zval(hentry[0]);
+	wrapped = frozen_array_wrap_zval(hentry[0] TSRMLS_CC);
 
 	RETURN_ZVAL(wrapped, 0, 1);
 }
